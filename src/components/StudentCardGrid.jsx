import { useEffect, useState,useRef } from "react";
import confetti from "canvas-confetti"; // üéÜ ‡πÑ‡∏•‡∏ö‡∏£‡∏≤‡∏£‡∏µ‡∏û‡∏•‡∏∏
import "./StudentCardGrid.css"; // ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö glow animation

export default function StudentCardGrid() {
  const maxScore = 100;

  useEffect(() => {
  const handleBeforeUnload = (e) => {
    e.preventDefault();
    e.returnValue = ""; // ‡∏ö‡∏≤‡∏á browser ‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏™‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÇ‡∏ä‡∏ß‡πå popup
  };
  window.addEventListener("beforeunload", handleBeforeUnload);
  return () => {
    window.removeEventListener("beforeunload", handleBeforeUnload);
  };
}, []);


  const avatars = [
    "üêØ", "ü¶Å", "ü¶Ñ", "üêº", "üê∏", "üêµ", "üê®", "üê∞", "üê±",
    "üêÆ", "üêî", "üêß", "üê¶", "üê§", "ü¶â", "ü¶Ö", "üê¢", "üêç",
    "üêô", "ü¶ï", "ü¶ñ", "üê≥", "üê¨", "üê†", "ü¶ã", "üêù", "üêû",
    "üê≤", "üêâ", "ü¶ä", "ü¶ù", "ü¶ì", "ü¶í", "ü¶ò", "ü¶î", "ü¶¶", "ü¶•"
  ];

  // ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô
  const names = [
    "‡∏à‡∏¥‡∏£‡∏û‡∏±‡∏í‡∏ô‡πå","‡∏ä‡∏¢‡∏û‡∏•","‡∏ä‡∏ß‡∏ô‡∏≤‡∏Å‡∏£","‡∏ì‡∏±‡∏ê‡∏ä‡∏ô‡∏ô","‡∏ì‡∏±‡∏ê‡∏ô‡∏±‡∏ô‡∏ó‡πå","‡∏ò‡∏ô‡πÇ‡∏ä‡∏ï‡∏¥","‡∏û‡∏±‡∏™‡∏Å‡∏£","‡∏ò‡∏£‡∏ì‡∏¥‡∏ô‡∏ó‡∏£‡πå","‡∏ô‡∏†‡∏±‡∏™‡∏Å‡∏£","‡∏õ‡∏¥‡πÇ‡∏¢‡∏£‡∏™",
    "‡∏û‡∏¥‡∏ä‡∏¥‡∏ï","‡∏†‡∏±‡∏ó‡∏£‡∏ò‡∏£","‡∏†‡∏≤‡∏ß‡∏±‡∏ï","‡∏ß‡∏ä‡∏¥‡∏£‡∏ß‡∏¥‡∏ä‡∏ç‡πå","‡∏®‡∏±‡∏Å‡∏î‡∏¥‡∏ò‡∏±‡∏ä","‡∏®‡∏∏‡∏†‡∏ì‡∏±‡∏ê","‡∏Å‡∏±‡∏ç‡∏ç‡πå‡∏ß‡∏£‡∏≤","‡∏Å‡∏±‡∏ô‡∏ï‡∏û‡∏£","‡∏Å‡∏¥‡∏£‡∏ì‡∏≤","‡∏à‡∏¥‡∏£‡∏ä‡∏ç‡∏≤‡∏î‡∏≤",
    "‡∏à‡∏¥‡∏£‡∏≤‡∏û‡∏±‡∏ä","‡∏ê‡∏£‡∏¥‡∏ï‡∏≤","‡∏õ‡∏†‡∏≤‡∏î‡∏≤","‡∏õ‡∏†‡∏≤‡∏ß‡∏£‡∏¥‡∏ô‡∏ó‡πå","‡∏õ‡∏£‡∏µ‡∏î‡∏≤‡∏ô‡∏±‡∏ô‡∏ó‡πå","‡πÄ‡∏õ‡∏°‡∏¥‡∏Å‡∏≤","‡∏û‡∏¥‡∏ä‡∏ç‡πå‡∏•‡∏•‡∏¥‡∏î‡∏≤","‡∏†‡∏±‡∏ó‡∏£‡∏†‡∏£","‡∏≠‡∏•‡∏¥‡∏™‡∏≤","‡∏Å‡∏ô‡∏Å‡∏û‡∏á‡∏®‡πå",
    "‡∏Å‡∏§‡∏ï‡πÄ‡∏°‡∏ò","‡∏Å‡πâ‡∏≠‡∏á‡∏†‡∏û","‡πÄ‡∏Å‡∏£‡∏¥‡∏Å‡∏§‡∏ó‡∏ò‡∏¥‡πå","‡πÄ‡∏ï‡∏ä‡∏¥‡∏ô‡∏ó‡πå","‡∏ò‡∏ô‡∏Å‡∏£","‡∏ò‡∏ô‡∏ß‡∏£‡∏£‡∏ò‡∏ô‡πå","‡∏õ‡∏∏‡∏ì‡∏¢‡∏ß‡∏µ‡∏£‡πå","‡∏û‡∏±‡∏ä‡∏£‡∏Å‡∏π‡∏•","‡∏†‡∏≤‡∏ô‡∏∏‡∏ß‡∏±‡∏í‡∏ô‡πå","‡∏ß‡∏ä‡∏¥‡∏£‡∏ß‡∏¥‡∏ä‡∏ç‡πå",
    "‡∏ß‡∏™‡∏∏‡∏ß‡∏±‡∏ç‡∏ç‡πå","‡∏®‡∏ï‡∏Ñ‡∏∏‡∏ì","‡∏≠‡∏ï‡∏¥‡πÄ‡∏ó‡∏û","‡∏≠‡∏£‡∏á‡∏ì‡πå‡∏Å‡∏£","‡∏à‡∏¥‡∏£‡∏≤‡∏û‡∏±‡∏ä‡∏£","‡πÇ‡∏à‡πÇ‡∏ã‡∏ü‡∏¥‡∏ô","‡∏ì‡∏¥‡∏ä‡∏ô‡∏±‡∏ô‡∏ó‡∏ô‡πå","‡∏ò‡∏±‡∏ç‡∏û‡∏¥‡∏ä‡∏ä‡∏≤","‡∏ô‡∏±‡∏ô‡∏ó‡πå‡∏ô‡∏†‡∏±‡∏™","‡∏ú‡∏Å‡∏≤‡∏Å‡∏£‡∏≠‡∏á",
    "‡πÇ‡∏¢‡∏™‡∏¥‡∏ï‡∏≤","‡∏£‡∏±‡∏ä‡∏ô‡∏µ‡∏ß‡∏£‡∏£‡∏ì","‡∏£‡∏∏‡πà‡∏á‡∏ô‡∏¥‡∏†‡∏≤","‡∏ß‡∏ä‡∏¥‡∏£‡∏ç‡∏≤‡∏ì‡πå","‡∏ß‡∏£‡∏±‡∏ó‡∏ò‡∏¥‡∏ï‡∏≤","‡∏ß‡∏¥‡∏•‡∏≤‡∏™‡∏¥‡∏ô‡∏µ","‡∏™‡∏∏‡∏õ‡∏£‡∏∞‡∏ß‡∏µ‡∏ì‡πå"
  ];

  const initialStudents = names.map((name, index) => ({
    id: index + 1,
    name,
    avatar: avatars[index % avatars.length], // ‡πÅ‡∏à‡∏Å‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥‡∏à‡∏ô‡∏Å‡∏ß‡πà‡∏≤‡∏à‡∏∞‡∏´‡∏°‡∏î avatars
    score: 0
  }));

  const [students, setStudents] = useState(initialStudents);
  const [highlightedId, setHighlightedId] = useState(null);

  // ‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á ding
  const audio = new Audio("/ding.mp3");
audio.play();



  // ‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏à‡∏≤‡∏Å localStorage
  useEffect(() => {
    const saved = localStorage.getItem("studentScores");
    if (saved) {
      try {
        const parsed = JSON.parse(saved);
        if (Array.isArray(parsed) && parsed.length === initialStudents.length) {
          setStudents(parsed);
        }
      } catch (err) {
        console.error("Error parsing saved scores:", err);
      }
    }
  }, []);

  // ‡πÄ‡∏ã‡∏ü‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô
  useEffect(() => {
    localStorage.setItem("studentScores", JSON.stringify(students));
  }, [students]);

  // ‡πÄ‡∏û‡∏¥‡πà‡∏°/‡∏•‡∏î‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô + highlight card
  const handleScore = (id, delta) => {
    setStudents(prev =>
      prev.map(student =>
        student.id === id
          ? {
              ...student,
              score: Math.max(0, Math.min(student.score + delta, maxScore)),
            }
          : student
      )
    );

    setHighlightedId(id);
    setTimeout(() => setHighlightedId(null), 2000);
    // ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏ï‡∏≠‡∏ô‡∏Å‡∏î +
    if (delta > 0 && dingSound.current) {
      dingSound.current.currentTime = 0; // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡πÉ‡∏´‡πâ‡πÄ‡∏•‡πà‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á
      dingSound.current.play();
    }

    // üéÜ ‡∏¢‡∏¥‡∏á‡∏û‡∏•‡∏∏‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô
    if (delta > 0) {
      confetti({
        particleCount: 80,
        spread: 70,
        origin: { y: 0.6 }, // ‡∏¢‡∏¥‡∏á‡∏à‡∏≤‡∏Å‡∏Å‡∏•‡∏≤‡∏á‡∏à‡∏≠
      });
    }
  };

  const resetScores = () => setStudents(initialStudents);

  // Auto-sort leaderboard
  const sortedStudents = [...students].sort((a, b) => b.score - a.score);

  return (
    <div className="p-4">
      <div className="flex justify-between items-center mb-4">
        <h2 className="text-lg font-bold">Leaderboard ‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô</h2>
        <button
          onClick={resetScores}
          className="bg-yellow-500 text-white px-4 py-2 rounded hover:bg-yellow-600"
        >
          ‡∏£‡∏µ‡πÄ‡∏ã‡∏ï‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        </button>
      </div>

      <div className="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-6 gap-2 max-h-[80vh] overflow-y-auto">
        {sortedStudents.map(student => (
          <div
            key={student.id}
            className={`bg-green-50 rounded p-2 flex flex-col items-center relative transition-all duration-300
              ${
                highlightedId === student.id
                  ? "scale-110 shadow-2xl z-10 animate-glow"
                  : "shadow"
              } hover:scale-105`}
          >
            {/* ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô */}
            <div className="text-5xl font-bold mb-2">{student.score}</div>

            {/* Avatar */}
            <div className="text-4xl my-2">{student.avatar}</div>

            {/* ‡∏ä‡∏∑‡πà‡∏≠ */}
            <div className="text-2xl font-semibold mb-2">{student.name}</div>

            {/* ‡∏õ‡∏∏‡πà‡∏° + / - */}
            <div className="flex gap-2 mt-2">
              <button
                onClick={() => handleScore(student.id, 1)}
                className="bg-green-500 text-white px-2 py-1 rounded text-xs hover:bg-green-600"
              >
                +
              </button>
              <button
                onClick={() => handleScore(student.id, -1)}
                className="bg-red-500 text-white px-2 py-1 rounded text-xs hover:bg-red-600"
              >
                -
              </button>
            </div>
          </div>
        ))}
      </div>
    </div>
  );
}
